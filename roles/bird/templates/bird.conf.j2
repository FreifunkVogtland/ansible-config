# SPDX-License-Identifier: CC0-1.0
# SPDX-FileCopyrightText: 2017-2020, Sven Eckelmann <sven@narfation.org>

router id {{ BGPID }};
table kernelcopy;
table igp_t;

protocol direct {
	interface "bat-*";
	interface "bb-*";
	interface "bb_ipv4";
	interface "vxlan0";
	interface "icvpn";
};

protocol kernel {
	device routes;
	import all;
	export all;
	kernel table 100;
};

protocol device {
	scan time 10;
};

protocol static unreachable_default {
	preference 0;
	route 0.0.0.0/0 reject;
}

{% if DIRECT == "1" %}
protocol static direct_default {
	route 0.0.0.0/0 via {{ WANGW }};
}
{% endif %}

function is_default() {
	return (net ~ [0.0.0.0/0]);
};

# own network
function is_self_net() {
	return (net ~ [ {{ vogtland_ipv4 }}+ ]);
}

# freifunk ip ranges in general
function is_freifunk() {
	return net ~ [ 10.0.0.0/8+,
		172.16.0.0/12+,
		104.0.0.0/8+
	];
}

# transition networks
function is_transition() {
	return (net ~ [
		10.207.0.0/16+
	]);
}

protocol kernel {
	table kernelcopy;
	device routes;
	import none;
	export filter {
		if is_freifunk() then { krt_prefsrc = {{ ROUTERID }}; accept ; }
		reject;
	};
};

protocol pipe {
	peer table kernelcopy;
	import none;
	export all;
}

filter hostroute {
	{% if BACKBONE_IPV4 is defined %}
	if net ~ {{ BACKBONE_IPV4 }} then accept;
	{% endif %}
	reject;
};

roa table icvpn_roa {
{% if icvpn %}
	include "/var/tmp/bird-icvpn-roa.conf";
{% endif %}
}

filter icvpn_in {
	if !is_freifunk() then reject;
	if is_self_net() then reject;
	if roa_check(icvpn_roa, net, bgp_path.last) = ROA_INVALID then {
		print "ROA check failed for ", net, " ASN ", bgp_path.last;
		reject;
	}
	accept;
}

filter icvpn_out {
	if is_self_net() then accept;
	if source = RTS_BGP then {
		if is_freifunk() then accept;
	}
	reject;
}

protocol ospf o_mesh {
	table igp_t;
	preference 90;
	import where is_default() || is_self_net() || is_transition();
	export where is_self_net() || is_transition();
	area 0 {
{% if icvpn %}
		networks {
			10.207.0.0/16;
		};
{% endif %}
		interface "vxlan0" {
			authentication cryptographic;
			password "{{ ospf_password }}";
			type nonbroadcast;
			neighbors {
{% for peer in (groups['vpns'] | difference([inventory_hostname]) | sort()) %}
				{{ hostvars[peer]['bgp_ipv4'] | ipaddr('address') }} eligible;
{% endfor %}
			};
		};
	};
};

# ibgp zwischen den gateways
template bgp internal {
	igp table igp_t;
	local as {{ OWNASN }};
	import filter {
		preference = 99;
		accept;
	};
	export where source = RTS_BGP;
	direct;
};

{% for peer in (groups['vpns'] | difference([inventory_hostname]) | sort()) %}
protocol bgp {{ peer }} from internal {
  neighbor {{ hostvars[peer]['bgp_ipv4'] | ipaddr('address') }} as {{ OWNASN }};
}
{% endfor %}

# Uplink ueber ff Rheinland
template bgp uplink {
	local as {{ OWNASN }};
{% if BACKBONE_IPV4 is defined %}
	import where is_default();
{% else %}
	import filter {
		reject;
	};
{% endif %}
	export filter hostroute;
	next hop self;
	multihop 64;
	default bgp_local_pref 200;
};

{% for name in (ffrl_bb_links.keys() |sort()) %}
protocol bgp {{ name }} from uplink {
	source address {{ ffrl_bb_links[name].ipv4.src }};
	neighbor {{ ffrl_bb_links[name].ipv4.dst }} as {{ ffrl_bb_asn }};
};
{% endfor %}

# template for icvpn gateways of other cities
template bgp icvpn {
	local as {{ OWNASN }};
	# ignore routes for our own network
	import filter icvpn_in;
	export filter icvpn_out;
	route limit 10000;
	direct;
};

{% if icvpn %}
include "/var/tmp/bird-icvpn.conf";
{% endif %}

protocol static {
	import all;
	export all;
}
