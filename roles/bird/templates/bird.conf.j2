router id {{ ROUTERID }};
table kernelcopy;

protocol direct {
	interface "*";
};

protocol kernel {
        device routes;
        import all;
        export all;
        kernel table 100;
};

protocol device {
  scan time 10;
};

function is_default() {
        return (net ~ [0.0.0.0/0]);
};

# own network
function is_self_net() {
    return (net ~ [ 10.204.0.0/16+ ]);
}

# freifunk ip ranges in general
function is_freifunk() {
  return net ~ [ 10.0.0.0/8+,
    172.16.0.0/12+,
    104.0.0.0/8+
  ];
}

protocol kernel {
	table kernelcopy;
	device routes;
	import none;
	export filter {
		if is_freifunk() then { krt_prefsrc = {{ ROUTERID }}; accept ; }
		reject;
	};
};

protocol pipe {
	peer table kernelcopy;
	import none;
	export all;
}

filter hostroute {
	{% if BACKBONE_IPV4 != '' %}
	if net ~ {{ BACKBONE_IPV4 }} then accept;
	{% endif %}
        reject;
};

# ibgp zwischen den gateways
template bgp internal {
        local as {{ OWNASN }};
        import filter {
                preference = 99;
                accept;
        };
        export where source = RTS_BGP;
#        gateway direct;
        next hop self;
};

{% for peer in (groups['vpns'] | difference([inventory_hostname])) %}
protocol bgp {{ peer }} from internal {
  neighbor {{ hostvars[peer]['ROUTERID'] }} as {{ OWNASN }};
}
{% endfor %}

# Uplink ueber ff Rheinland
template bgp uplink {
        local as {{ OWNASN }};
        import where is_default();
        export filter hostroute;
        next hop self;
        multihop 64;
        default bgp_local_pref 200;
};

# TODO autogenerate
{% if ffrl_bird is defined %}
include "/opt/freifunk/server-scripts/ffrl-backbone/bird.ffrl.conf.{{ ffrl_bird }}";
{% endif %}

# template for icvpn gateways of other cities
template bgp icvpn {
  local as {{ OWNASN }};
  # ignore routes for our own network
  import where (is_freifunk() && !is_self_net());
  export where is_freifunk();
  route limit 10000;
};

include "/var/tmp/bird-icvpn.conf";

protocol static {
  import all;
  export all;
}
