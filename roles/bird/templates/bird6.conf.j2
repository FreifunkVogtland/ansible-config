router id {{ ROUTERID }};
listen bgp v6only;

protocol direct {
	interface "*";  # Restrict network interfaces it works with
}

protocol kernel {
	device routes;
	import all;
	export all;
	kernel table 100;
}

protocol device {
	scan time 10;
}

protocol static unreachable_default {
	preference 0;
	route ::/0 reject;
}

function is_default() {
	return (net ~ [::/0]);
}

# own networks
function is_self_net() {
	return net ~ [ 2a03:2260:200f::/48+ ];
}

# freifunk ip ranges in general
function is_freifunk() {
	return net ~ [
		fc00::/7{48,64},
		2001:bf7::/32+
	];
}

filter hostroute {
	if net ~ 2a03:2260:200f::/48 then accept;
	reject;
}

roa table icvpn_roa {
	include "/var/tmp/bird6-icvpn-roa.conf";
}

filter icvpn_in {
	if !is_freifunk() then reject;
	if is_self_net() then reject;
	if roa_check(icvpn_roa, net, bgp_path.last) = ROA_INVALID then {
		print "ROA check failed for ", net, " ASN ", bgp_path.last;
		reject;
	}
	accept;
}

filter icvpn_out {
	if is_self_net() then accept;
	if source = RTS_BGP then {
		if is_freifunk() then accept;
	}
	reject;
}

protocol ospf o_mesh {
	preference 90;
	import where is_default() || is_self_net();
	area 0 {
		interface "bat0" {
			type nonbroadcast;
			neighbors {
{% for peer in (groups['vpns'] | difference([inventory_hostname])) %}
				{{ hostvars[peer]['ROUTERIDV6'] }} eligible;
{% endfor %}
			};
		};
	};
};

# ibgp zwischen den gateways
template bgp internal {
	local as {{ OWNASN }};
	import filter {
		preference = 99;
		accept;
	};
	export where source = RTS_BGP;
	direct;
	next hop self;
};

{% for peer in (groups['vpns'] | difference([inventory_hostname])) %}
protocol bgp {{ peer }} from internal {
	neighbor {{ hostvars[peer]['ROUTERIDV6'] }} as {{ OWNASN }};
}
{% endfor %}

# Uplink zum FF Rheinland
template bgp uplink {
	local as {{ OWNASN }};
	import where is_default();
	export filter hostroute;
	gateway recursive;
}

{% for name in (ffrl_bb_links.keys() |sort()) %}
protocol bgp {{ name }} from uplink {
	source address {{ ffrl_bb_links[name].ipv6.src }};
	neighbor {{ ffrl_bb_links[name].ipv6.dst }} as {{ ffrl_bb_asn }};
};
{% endfor %}

# template for icvpn gateways of other cities
template bgp icvpn {
	local as {{ OWNASN }};
	# ignore routes for our own network
	import filter icvpn_in;
	export filter icvpn_out;
	route limit 10000;
	direct;
};

# aus ICVPN Meta erzeugte konfiguration
include "/var/tmp/bird6-icvpn.conf";

protocol static {
	import all;
	export all;

	route 2a03:2260:200f::/48 via "bat0";
}
