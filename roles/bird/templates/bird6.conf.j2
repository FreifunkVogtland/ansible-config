

roa6 table icvpn_roa {
{% if icvpn %}
#	include "/var/tmp/bird6-icvpn-roa.conf";
{% endif %}
}

filter icvpn_in6 {
	if !is_freifunk6() then reject;
	if is_self_net6() then reject;
	if roa_check(icvpn_roa6, net, bgp_path.last) = ROA_INVALID then {
		print "ROA check failed for ", net, " ASN ", bgp_path.last;
		reject;
	}
	accept;
}

filter icvpn_out6 {
	reject_remote_peer_subnet6();
	if is_self_net6() then accept;
	if source = RTS_BGP then {
		if is_freifunk6() then accept;
	}
	reject;
}

protocol ospf v3 o_mesh6 {
	table igp_t6;
	preference 90;
	import where is_default6() || is_self_net6() || is_transition6();
	export where is_self_net6() || is_transition6();
	area 0 {
{% if icvpn %}
		networks {
			fec0::a:cf:0:0/96;
		};
{% endif %}
		interface "vxlan0" {
			type nonbroadcast;
			neighbors {
{% for peer in (groups['vpns'] | difference([inventory_hostname]) | sort()) %}
				{{ hostvars[peer]['bgp_ipv6'] | ansible.utils.ipaddr('address') }} eligible;
{% endfor %}
			};
		};
	};
};

# ibgp zwischen den gateways
template bgp internal_t6 {
	igp table igp_t6;
	local as {{ OWNASN }};
	import filter {
		preference = 99;
		accept;
	};
	export filter {
		reject_remote_peer_subnet6();
		if source = RTS_BGP then accept;
		if net ~ {{ ffrl_ipv6_subnet }} then accept;
		reject;
	};
	direct;
};

{% for peer in (groups['vpns'] | difference([inventory_hostname]) | sort()) %}
protocol bgp {{ peer }} from internal_t6 {
	neighbor {{ hostvars[peer]['bgp_ipv6'] | ansible.utils.ipaddr('address') }} as {{ OWNASN }};
}
{% endfor %}

# Uplink zum FF Rheinland
template bgp uplink6 {
	local as {{ OWNASN }};
	import where is_default6();
	export filter hostroute6;
	gateway recursive;
}

{% for name in (ffrl_bb_links.keys() |sort()) %}
protocol bgp {{ name }} from uplink6 {
	source address {{ ffrl_bb_links[name].ipv6.src }};
	neighbor {{ ffrl_bb_links[name].ipv6.dst }} as {{ ffrl_bb_asn }};
};
{% endfor %}

# template for icvpn gateways of other cities
template bgp icvpn {
	local as {{ OWNASN }};
	# ignore routes for our own network
	import filter icvpn_in6;
	export filter icvpn_out6;
	route limit 10000;
	direct;
};

{% if icvpn %}
# aus ICVPN Meta erzeugte konfiguration
include "/var/tmp/bird6-icvpn.conf";
{% endif %}

protocol static {
	import all;
	export all;

	{% for peer in (groups['vpns'] | sort()) -%}
		{% for mesh_name in (hostvars[peer]['mesh'].keys() |sort()) %}
		route {{ hostvars[peer]['mesh'][mesh_name]['ipv6']['subnet'] }} via "bat-{{ mesh_name }}";
		{% endfor %}
	{%- endfor %}

	route {{ OLDRANGEV6 }} via "bat-ffv";
	route {{ ROUTERRANGEV6 }} via "bb_ipv4";
}
